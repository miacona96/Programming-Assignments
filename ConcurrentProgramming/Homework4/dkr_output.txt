  0:	proc  - (:root:) creates proc  0 (:init:)
0 :init ini I = 1          
Process Statement          I          
0 :init ini I<=5           1          
0 :init ini Ini[4]==0)&[4] 1          
0 :init ini Ini[4] = I     1          
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] I          
0 :init ini I = (I+1)      0          0          0          0          1          0          1          
0 :init ini I<=5           0          0          0          0          1          0          2          
0 :init ini Ini[1]==0)&[1] 0          0          0          0          1          0          2          
0 :init ini Ini[1] = I     0          0          0          0          1          0          2          
0 :init ini I = (I+1)      0          2          0          0          1          0          2          
0 :init ini I<=5           0          2          0          0          1          0          3          
0 :init ini Ini[0]==0)&[0] 0          2          0          0          1          0          3          
0 :init ini Ini[0] = I     0          2          0          0          1          0          3          
0 :init ini I = (I+1)      3          2          0          0          1          0          3          
0 :init ini I<=5           3          2          0          0          1          0          4          
0 :init ini Ini[3]==0)&[3] 3          2          0          0          1          0          4          
0 :init ini Ini[3] = I     3          2          0          0          1          0          4          
0 :init ini I = (I+1)      3          2          0          4          1          0          4          
0 :init ini I<=5           3          2          0          4          1          0          5          
0 :init ini Ini[2]==0)&[2] 3          2          0          4          1          0          5          
0 :init ini Ini[2] = I     3          2          0          4          1          0          5          
0 :init ini I = (I+1)      3          2          5          4          1          0          5          
0 :init ini I>5            3          2          5          4          1          0          6          
0 :init ini break          3          2          5          4          1          0          6          
0 :init ini proc = 1       3          2          5          4          1          0          6          
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          
0 :init ini proc<=5        3          2          5          4          1          0          1          6          
Starting nnode with pid 1
 27:	proc  0 (:init:) creates proc  1 (nnode)
0 :init ini run nnode(q[(p 3          2          5          4          1          0          1          6          
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          q[0]       q[1]       q[2]       q[3]       q[4]       
0 :init ini proc = (proc+1 3          2          5          4          1          0          1          6                                                                 
0 :init ini proc<=5        3          2          5          4          1          0          2          6                                                                 
Starting nnode with pid 2
 30:	proc  0 (:init:) creates proc  2 (nnode)
0 :init ini run nnode(q[(p 3          2          5          4          1          0          2          6                                                                 
0 :init ini proc = (proc+1 3          2          5          4          1          0          2          6                                                                 
0 :init ini proc<=5        3          2          5          4          1          0          3          6                                                                 
Starting nnode with pid 3
 33:	proc  0 (:init:) creates proc  3 (nnode)
0 :init ini run nnode(q[(p 3          2          5          4          1          0          3          6                                                                 
0 :init ini proc = (proc+1 3          2          5          4          1          0          3          6                                                                 
0 :init ini proc<=5        3          2          5          4          1          0          4          6                                                                 
Starting nnode with pid 4
 36:	proc  0 (:init:) creates proc  4 (nnode)
0 :init ini run nnode(q[(p 3          2          5          4          1          0          4          6                                                                 
0 :init ini proc = (proc+1 3          2          5          4          1          0          4          6                                                                 
0 :init ini proc<=5        3          2          5          4          1          0          5          6                                                                 
Starting nnode with pid 5
 39:	proc  0 (:init:) creates proc  5 (nnode)
0 :init ini run nnode(q[(p 3          2          5          4          1          0          5          6                                                                 
0 :init ini proc = (proc+1 3          2          5          4          1          0          5          6                                                                 
0 :init ini proc>5         3          2          5          4          1          0          6          6                                                                 
0 :init ini break          3          2          5          4          1          0          6          6                                                                 
 MSC : 2
2 nnode 17  printf(' MSC : 3          2          5          4          1          0          6          6                                                                 
 MSC : 4
4 nnode 17  printf(' MSC : 3          2          5          4          1          0          6          6                                                                 
2 nnode 18  values: 3!one, 3          2          5          4          1          0          6          6                                                                 
2 nnode 18  out!one,mynumb 3          2          5          4          1          0          6          6                                                                 
 MSC : 1
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(2    q[0]       q[1]       q[2]       q[3]       q[4]       
5 nnode 17  printf(' MSC : 3          2          5          4          1          0          6          6          out[one,2]                       [one,2]                          
5 nnode 18  values: 1!one, 3          2          5          4          1          0          6          6          out[one,2]                       [one,2]                          
5 nnode 18  out!one,mynumb 3          2          5          4          1          0          6          6          out[one,2]                       [one,2]                          
 MSC : 3
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(2    nnode(5    q[0]       q[1]       q[2]       q[3]       q[4]       
1 nnode 17  printf(' MSC : 3          2          5          4          1          0          6          6          out[one,2] out[one,1] [one,1]               [one,2]                          
4 nnode 18  values: 5!one, 3          2          5          4          1          0          6          6          out[one,2] out[one,1] [one,1]               [one,2]                          
4 nnode 18  out!one,mynumb 3          2          5          4          1          0          6          6          out[one,2] out[one,1] [one,1]               [one,2]                          
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(2    nnode(4    nnode(5    q[0]       q[1]       q[2]       q[3]       q[4]       
1 nnode 18  values: 2!one, 3          2          5          4          1          0          6          6          out[one,2] out[one,4] out[one,1] [one,1]               [one,2]               [one,4]    
1 nnode 18  out!one,mynumb 3          2          5          4          1          0          6          6          out[one,2] out[one,4] out[one,1] [one,1]               [one,2]               [one,4]    
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(2    nnode(4    nnode(5    q[0]       q[1]       q[2]       q[3]       q[4]       
5 nnode 21  values: 5?one, 3          2          5          4          1          0          6          6          out[one,3] out[one,2] out[one,4] out[one,1] [one,1]    [one,3]    [one,2]               [one,4]    
5 nnode 20  inp?one,nr     3          2          5          4          1          0          6          6          out[one,3] out[one,2] out[one,4] out[one,1] [one,1]    [one,3]    [one,2]               [one,4]    
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(2    nnode(4    nnode(5    nnode(5):n q[0]       q[1]       q[2]       q[3]       q[4]       
1 nnode 21  values: 1?one, 3          2          5          4          1          0          6          6          out[one,3] out[one,2] out[one,4] inp):      4          [one,1]    [one,3]    [one,2]                          
1 nnode 20  inp?one,nr     3          2          5          4          1          0          6          6          out[one,3] out[one,2] out[one,4] inp):      4          [one,1]    [one,3]    [one,2]                          
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):n nnode(2    nnode(4    nnode(5    nnode(5):n q[0]       q[1]       q[2]       q[3]       q[4]       
5 nnode 22  Active         3          2          5          4          1          0          6          6          inp):      1          out[one,2] out[one,4] inp):      4                     [one,3]    [one,2]                          
2 nnode 21  values: 2?one, 3          2          5          4          1          0          6          6          inp):      1          out[one,2] out[one,4] inp):      4                     [one,3]    [one,2]                          
2 nnode 20  inp?one,nr     3          2          5          4          1          0          6          6          inp):      1          out[one,2] out[one,4] inp):      4                     [one,3]    [one,2]                          
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):n nnode(2    nnode(2):n nnode(4    nnode(5    nnode(5):n q[0]       q[1]       q[2]       q[3]       q[4]       
5 nnode 24  nr!=maximum    3          2          5          4          1          0          6          6          inp):      1          inp):      3          out[one,4] inp):      4                                [one,2]                          
5 nnode 26  values: 1!two, 3          2          5          4          1          0          6          6          inp):      1          inp):      3          out[one,4] inp):      4                                [one,2]                          
5 nnode 26  out!two,nr     3          2          5          4          1          0          6          6          inp):      1          inp):      3          out[one,4] inp):      4                                [one,2]                          
 MSC : 5
3 nnode 17  printf(' MSC : 3          2          5          4          1          0          6          6          inp):      1          inp):      3          out[one,4] out[two,4] 4          [two,4]               [one,2]                          
2 nnode 22  Active         3          2          5          4          1          0          6          6          inp):      1          inp):      3          out[one,4] out[two,4] 4          [two,4]               [one,2]                          
2 nnode 24  nr!=maximum    3          2          5          4          1          0          6          6          inp):      1          inp):      3          out[one,4] out[two,4] 4          [two,4]               [one,2]                          
1 nnode 22  Active         3          2          5          4          1          0          6          6          inp):      1          inp):      3          out[one,4] out[two,4] 4          [two,4]               [one,2]                          
1 nnode 24  nr!=maximum    3          2          5          4          1          0          6          6          inp):      1          inp):      3          out[one,4] out[two,4] 4          [two,4]               [one,2]                          
2 nnode 26  values: 3!two, 3          2          5          4          1          0          6          6          inp):      1          inp):      3          out[one,4] out[two,4] 4          [two,4]               [one,2]                          
2 nnode 26  out!two,nr     3          2          5          4          1          0          6          6          inp):      1          inp):      3          out[one,4] out[two,4] 4          [two,4]               [one,2]                          
1 nnode 26  values: 2!two, 3          2          5          4          1          0          6          6          inp):      1          out): [one 3          out[one,4] out[two,4] 4          [two,4]               [one,2][tw                       
1 nnode 26  out!two,nr     3          2          5          4          1          0          6          6          inp):      1          out): [one 3          out[one,4] out[two,4] 4          [two,4]               [one,2][tw                       
2 nnode 27  neighbourR = n 3          2          5          4          1          0          6          6          out[two,1] 1          out): [one 3          out[one,4] out[two,4] 4          [two,4]    [two,1]    [one,2][tw                       
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):n nnode(2    nnode(2):n nnode(2):n nnode(4    nnode(5    nnode(5):n q[0]       q[1]       q[2]       q[3]       q[4]       
3 nnode 18  values: 4!one, 3          2          5          4          1          0          6          6          out[two,1] 1          out): [one 3          3          out[one,4] out[two,4] 4          [two,4]    [two,1]    [one,2][tw                       
3 nnode 18  out!one,mynumb 3          2          5          4          1          0          6          6          out[two,1] 1          out): [one 3          3          out[one,4] out[two,4] 4          [two,4]    [two,1]    [one,2][tw                       
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):n nnode(2    nnode(2):n nnode(2):n nnode(3    nnode(4    nnode(5    nnode(5):n q[0]       q[1]       q[2]       q[3]       q[4]       
4 nnode 21  values: 4?one, 3          2          5          4          1          0          6          6          out[two,1] 1          out): [one 3          3          out[one,5] out[one,4] out[two,4] 4          [two,4]    [two,1]    [one,2][tw [one,5]               
4 nnode 20  inp?one,nr     3          2          5          4          1          0          6          6          out[two,1] 1          out): [one 3          3          out[one,5] out[one,4] out[two,4] 4          [two,4]    [two,1]    [one,2][tw [one,5]               
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):n nnode(2    nnode(2):n nnode(2):n nnode(3    nnode(4    nnode(4):n nnode(5    nnode(5):n q[0]       q[1]       q[2]       q[3]       q[4]       
5 nnode 27  neighbourR = n 3          2          5          4          1          0          6          6          out[two,1] 1          out): [one 3          3          out[one,5] inp):      5          out[two,4] 4          [two,4]    [two,1]    [one,2][tw                       
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):n nnode(2    nnode(2):n nnode(2):n nnode(3    nnode(4    nnode(4):n nnode(5    nnode(5):n nnode(5):n q[0]       q[1]       q[2]       q[3]       q[4]       
1 nnode 27  neighbourR = n 3          2          5          4          1          0          6          6          out[two,1] 1          out): [one 3          3          out[one,5] inp):      5          out[two,4] 4          4          [two,4]    [two,1]    [one,2][tw                       
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):n nnode(1):n nnode(2    nnode(2):n nnode(2):n nnode(3    nnode(4    nnode(4):n nnode(5    nnode(5):n nnode(5):n q[0]       q[1]       q[2]       q[3]       q[4]       
4 nnode 22  Active         3          2          5          4          1          0          6          6          out[two,1] 1          1          out): [one 3          3          out[one,5] inp):      5          out[two,4] 4          4          [two,4]    [two,1]    [one,2][tw                       
4 nnode 24  nr!=maximum    3          2          5          4          1          0          6          6          out[two,1] 1          1          out): [one 3          3          out[one,5] inp):      5          out[two,4] 4          4          [two,4]    [two,1]    [one,2][tw                       
4 nnode 26  values: 5!two, 3          2          5          4          1          0          6          6          out[two,1] 1          1          out): [one 3          3          out[one,5] inp):      5          out[two,4] 4          4          [two,4]    [two,1]    [one,2][tw                       
4 nnode 26  out!two,nr     3          2          5          4          1          0          6          6          out[two,1] 1          1          out): [one 3          3          out[one,5] inp):      5          out[two,4] 4          4          [two,4]    [two,1]    [one,2][tw                       
1 nnode 40  values: 1?two, 3          2          5          4          1          0          6          6          out[two,1] 1          1          out): [one 3          3          out[one,5] out[two,5] 5          out[two,4] 4          4          [two,4]    [two,1]    [one,2][tw            [two,5]    
1 nnode 20  inp?two,nr     3          2          5          4          1          0          6          6          out[two,1] 1          1          out): [one 3          3          out[one,5] out[two,5] 5          out[two,4] 4          4          [two,4]    [two,1]    [one,2][tw            [two,5]    
1 nnode 41  Active         3          2          5          4          1          0          6          6          inp):      1          4          out): [one 3          3          out[one,5] out[two,5] 5          out[two,4] 4          4                     [two,1]    [one,2][tw            [two,5]    
2 nnode 40  values: 2?two, 3          2          5          4          1          0          6          6          inp):      1          4          out): [one 3          3          out[one,5] out[two,5] 5          out[two,4] 4          4                     [two,1]    [one,2][tw            [two,5]    
2 nnode 20  inp?two,nr     3          2          5          4          1          0          6          6          inp):      1          4          out): [one 3          3          out[one,5] out[two,5] 5          out[two,4] 4          4                     [two,1]    [one,2][tw            [two,5]    
3 nnode 21  values: 3?one, 3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          out[one,5] out[two,5] 5          out[two,4] 4          4                                [one,2][tw            [two,5]    
3 nnode 20  inp?one,nr     3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          out[one,5] out[two,5] 5          out[two,4] 4          4                                [one,2][tw            [two,5]    
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):n nnode(1):n nnode(2    nnode(2):n nnode(2):n nnode(3    nnode(3):n nnode(4    nnode(4):n nnode(5    nnode(5):n nnode(5):n q[0]       q[1]       q[2]       q[3]       q[4]       
3 nnode 22  Active         3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          inp[two,3] 2          out[two,5] 5          out[two,4] 4          4                                [two,3]               [two,5]    
1 nnode 43  else           3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          inp[two,3] 2          out[two,5] 5          out[two,4] 4          4                                [two,3]               [two,5]    
4 nnode 27  neighbourR = n 3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          inp[two,3] 2          out[two,5] 5          out[two,4] 4          4                                [two,3]               [two,5]    
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):n nnode(1):n nnode(2    nnode(2):n nnode(2):n nnode(3    nnode(3):n nnode(4    nnode(4):n nnode(4):n nnode(5    nnode(5):n nnode(5):n q[0]       q[1]       q[2]       q[3]       q[4]       
3 nnode 24  nr!=maximum    3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          inp[two,3] 2          out[two,5] 5          5          out[two,4] 4          4                                [two,3]               [two,5]    
3 nnode 26  values: 4!two, 3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          inp[two,3] 2          out[two,5] 5          5          out[two,4] 4          4                                [two,3]               [two,5]    
3 nnode 26  out!two,nr     3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          inp[two,3] 2          out[two,5] 5          5          out[two,4] 4          4                                [two,3]               [two,5]    
5 nnode 40  values: 5?two, 3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          out[two,2] 2          out[two,5] 5          5          out[two,4] 4          4                                [two,3]    [two,2]    [two,5]    
5 nnode 20  inp?two,nr     3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          out[two,2] 2          out[two,5] 5          5          out[two,4] 4          4                                [two,3]    [two,2]    [two,5]    
spin: dekker.pml:49, Error: value (-1->255 (8)) truncated in assignment
1 nnode 49  nr_leaders = ( 3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          out[two,2] 2          out[two,5] 5          5          inp):      4          5                                [two,3]    [two,2]               
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):n nnode(1):n nnode(2    nnode(2):n nnode(2):n nnode(3    nnode(3):n nnode(4    nnode(4):n nnode(4):n nnode(5    nnode(5):n nnode(5):n nr_leaders q[0]       q[1]       q[2]       q[3]       q[4]       
5 nnode 41  Active         3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          out[two,2] 2          out[two,5] 5          5          inp):      4          5          255                              [two,3]    [two,2]               
3 nnode 27  neighbourR = n 3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          out[two,2] 2          out[two,5] 5          5          inp):      4          5          255                              [two,3]    [two,2]               
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):n nnode(1):n nnode(2    nnode(2):n nnode(2):n nnode(3    nnode(3):n nnode(3):n nnode(4    nnode(4):n nnode(4):n nnode(5    nnode(5):n nnode(5):n nr_leaders q[0]       q[1]       q[2]       q[3]       q[4]       
4 nnode 40  values: 4?two, 3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          out[two,2] 2          2          out[two,5] 5          5          inp):      4          5          255                              [two,3]    [two,2]               
4 nnode 20  inp?two,nr     3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          out[two,2] 2          2          out[two,5] 5          5          inp):      4          5          255                              [two,3]    [two,2]               
4 nnode 41  Active         3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          out[two,2] 2          2          inp):      5          2          inp):      4          5          255                              [two,3]                          
2 nnode 41  Active         3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          out[two,2] 2          2          inp):      5          2          inp):      4          5          255                              [two,3]                          
4 nnode 43  neighbourR>nr) 3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          out[two,2] 2          2          inp):      5          2          inp):      4          5          255                              [two,3]                          
1 nnode 50  Active = 0     3          2          5          4          1          0          6          6          inp):      1          4          inp):      3          1          out[two,2] 2          2          inp):      5          2          inp):      4          5          255                              [two,3]                          
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):A nnode(1):n nnode(1):n nnode(2    nnode(2):n nnode(2):n nnode(3    nnode(3):n nnode(3):n nnode(4    nnode(4):n nnode(4):n nnode(5    nnode(5):n nnode(5):n nr_leaders q[0]       q[1]       q[2]       q[3]       q[4]       
2 nnode 43  neighbourR>nr) 3          2          5          4          1          0          6          6          inp):      0          1          4          inp):      3          1          out[two,2] 2          2          inp):      5          2          inp):      4          5          255                              [two,3]                          
5 nnode 43  else           3          2          5          4          1          0          6          6          inp):      0          1          4          inp):      3          1          out[two,2] 2          2          inp):      5          2          inp):      4          5          255                              [two,3]                          
5 nnode 49  nr_leaders = ( 3          2          5          4          1          0          6          6          inp):      0          1          4          inp):      3          1          out[two,2] 2          2          inp):      5          2          inp):      4          5          255                              [two,3]                          
5 nnode 50  Active = 0     3          2          5          4          1          0          6          6          inp):      0          1          4          inp):      3          1          out[two,2] 2          2          inp):      5          2          inp):      4          5          254                              [two,3]                          
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):A nnode(1):n nnode(1):n nnode(2    nnode(2):n nnode(2):n nnode(3    nnode(3):n nnode(3):n nnode(4    nnode(4):n nnode(4):n nnode(5    nnode(5):A nnode(5):n nnode(5):n nr_leaders q[0]       q[1]       q[2]       q[3]       q[4]       
2 nnode 45  maximum = neig 3          2          5          4          1          0          6          6          inp):      0          1          4          inp):      3          1          out[two,2] 2          2          inp):      5          2          inp):      0          4          5          254                              [two,3]                          
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):A nnode(1):n nnode(1):n nnode(2    nnode(2):m nnode(2):n nnode(2):n nnode(3    nnode(3):n nnode(3):n nnode(4    nnode(4):n nnode(4):n nnode(5    nnode(5):A nnode(5):n nnode(5):n nr_leaders q[0]       q[1]       q[2]       q[3]       q[4]       
4 nnode 45  maximum = neig 3          2          5          4          1          0          6          6          inp):      0          1          4          inp):      3          3          1          out[two,2] 2          2          inp):      5          2          inp):      0          4          5          254                              [two,3]                          
Process Statement          :init:([0] :init:([1] :init:([2] :init:([3] :init:([4] :init:([5] :init:(0): I          nnode(1    nnode(1):A nnode(1):n nnode(1):n nnode(2    nnode(2):m nnode(2):n nnode(2):n nnode(3    nnode(3):n nnode(3):n nnode(4    nnode(4):m nnode(4):n nnode(4):n nnode(5    nnode(5):A nnode(5):n nnode(5):n nr_leaders q[0]       q[1]       q[2]       q[3]       q[4]       
2 nnode 46  values: 3!one, 3          2          5          4          1          0          6          6          inp):      0          1          4          inp):      3          3          1          out[two,2] 2          2          inp):      5          5          2          inp):      0          4          5          254                              [two,3]                          
2 nnode 46  out!one,neighb 3          2          5          4          1          0          6          6          inp):      0          1          4          inp):      3          3          1          out[two,2] 2          2          inp):      5          5          2          inp):      0          4          5          254                              [two,3]                          
4 nnode 46  values: 5!one, 3          2          5          4          1          0          6          6          inp):      0          1          4          out): [two 3          3          1          out[two,2] 2          2          inp):      5          5          2          inp):      0          4          5          254                              [two,3][on                       
4 nnode 46  out!one,neighb 3          2          5          4          1          0          6          6          inp):      0          1          4          out): [two 3          3          1          out[two,2] 2          2          inp):      5          5          2          inp):      0          4          5          254                              [two,3][on                       
5 nnode 21  values: 5?one, 3          2          5          4          1          0          6          6          inp):      0          1          4          out): [two 3          3          1          out[two,2] 2          2          out[one,5] 5          5          2          inp):      0          4          5          254                              [two,3][on            [one,5]    
5 nnode 20  inp?one,nr     3          2          5          4          1          0          6          6          inp):      0          1          4          out): [two 3          3          1          out[two,2] 2          2          out[one,5] 5          5          2          inp):      0          4          5          254                              [two,3][on            [one,5]    
5 nnode 22  else           3          2          5          4          1          0          6          6          inp):      0          1          4          out): [two 3          3          1          out[two,2] 2          2          out[one,5] 5          5          2          inp):      0          4          5          254                              [two,3][on                       
3 nnode 40  values: 3?two, 3          2          5          4          1          0          6          6          inp):      0          1          4          out): [two 3          3          1          out[two,2] 2          2          out[one,5] 5          5          2          out):      0          4          5          254                              [two,3][on                       
3 nnode 20  inp?two,nr     3          2          5          4          1          0          6          6          inp):      0          1          4          out): [two 3          3          1          out[two,2] 2          2          out[one,5] 5          5          2          out):      0          4          5          254                              [two,3][on                       
3 nnode 41  Active         3          2          5          4          1          0          6          6          inp):      0          1          4          out): [two 3          3          1          inp[one,3] 2          3          out[one,5] 5          5          2          out):      0          4          5          254                              [one,3]                          
3 nnode 43  else           3          2          5          4          1          0          6          6          inp):      0          1          4          out): [two 3          3          1          out):      2          3          out[one,5] 5          5          2          out):      0          4          5          254                              [one,3]                          
spin: dekker.pml:35, Error: assertion violated
spin: text of failed assertion: assert((nr==maximum))
#processes: 6
135:	proc  5 (nnode) dekker.pml:35 (state 16)
135:	proc  4 (nnode) dekker.pml:20 (state 47)
135:	proc  3 (nnode) dekker.pml:49 (state 26)
135:	proc  2 (nnode) dekker.pml:20 (state 47)
135:	proc  1 (nnode) dekker.pml:20 (state 47)
135:	proc  0 (:init:) dekker.pml:105 (state 33)
6 processes created
